#### 0. environment ####
rm(list=ls())
gc()
cat("\014")
#### 1. packages ####
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
#### 1. read data and parameters ####
source("readInputData.R")
source("loadParameters.R")
source("functions/mainFunctions.R")
#source("functions/plotFunctions.R")
location <- "Junín"
soilTypes = list (list (soil_series='Santa Isabel',
soil_family='Hapludol típico'),
list (soil_series='Saforcada',
soil_family='Hapludol éntico'),
list (soil_series='Delgado',
soil_family='Argiudol típico'),
list (soil_series='Ortiz de Rosas',
soil_family='Hapludol thapto árgico')
)
waterLoop <- c("low","mid","high")
#single execution
soil <- soilTypes[[1]]
waterCont <- waterLoop[2]
locationData <- list(location=location,
soil_series=soil$soil_series,
soil_family=soil$soil_family,
water=waterCont)
decisionStructured <- structureDecision(inputData,locationData)
decisionEvaluated <- calculateUtility(decisionStructured,parametersEU)
decisionEvaluated <- calculateRegrets(decisionEvaluated)
MOSolList <- getMOFront(decisionEvaluated, parametersList)
#plot MO
grid.arrange(plotMOLines(MOSolList),plotMOVerticalBars(MOSolList), nrow = 2)
#plot pure strategies
#plotPureStrategies2(MOSolList)
#explore vulnerabilities
#### 3. tree parameters ####
control.rpart <- rpart.control(minbucket = 80,minsplit = 80, cp = 0.015,
xval = 10,
maxdepth = 3)
loss.matrix <-  matrix(c(0, 1,2, 0), nrow=2, byrow=TRUE)
classTree <- getTreeByObjective(MOSolList,"E_ROI")
#classTree <- getTreeByObjectiveStr(MOSolList,"E_ROI", str=881)
## customized trade off plots
plotCustTradeOff(SolSplited$MOSolListGood,SolSplited$MOSolListBad, classTree, objBad="E_ROI",
annotateId=NA,getBestStrategies(MOSolList))
SolSplited <- splitSolByClassTree(MOSolList, classTree)
## customized trade off plots
plotCustTradeOff(SolSplited$MOSolListGood,SolSplited$MOSolListBad, classTree, objBad="E_ROI",
annotateId=NA,getBestStrategies(MOSolList))
SolSplited$MOSolListGood
SolSplited
MOSolList
classTree
SolSplited
classTree
MOSolList
pred.tree <- as.logical(predict(classTree$tree,
newdata=MOSolList$decisionEvaluated$scenarioDf,
type="class"))
pred.tree
MOSolList$decisionEvaluated$scenarioDf
predict(classTree$tree,
newdata=MOSolList$decisionEvaluated$scenarioDf)
help("predict")
pred.tree <- as.logical(predict(classTree$tree,
newdata=MOSolList$decisionEvaluated$scenarioDf))
pred.tree
predict(classTree$tree,
newdata=MOSolList$decisionEvaluated$scenarioDf)
pred.tree <- predict(classTree$tree,
newdata=MOSolList$decisionEvaluated$scenarioDf, type="level")
predict(classTree$tree,
newdata=MOSolList$decisionEvaluated$scenarioDf, type="class")
pred.tree <- predict(classTree$tree,
newdata=MOSolList$decisionEvaluated$scenarioDf, type="class")=="BAD"
pred.tree
splitSolByClassTree <- function(MOSolList, classTree) {
pred.tree <- predict(classTree$tree,
newdata=MOSolList$decisionEvaluated$scenarioDf, type="class")=="BAD"
#,type="class"))
#filter GOOD
MOSolListGood <- MOSolList
MOSolListGood$decisionEvaluated$scenarioDf <- MOSolListGood$decisionEvaluated$scenarioDf[!pred.tree,]
indexTemp <- rep(!pred.tree,nrow(MOSolList$decisionEvaluated$strategyDf))
MOSolListGood$decisionEvaluated$evalDf <- MOSolListGood$decisionEvaluated$evalDf[indexTemp,]
MOSolListGood$performanceMetrics <- calculatePerformaceByStrategy(MOSolListGood$decisionEvaluated, parametersList)
#filter BAD
MOSolListBad <- MOSolList
MOSolListBad$decisionEvaluated$scenarioDf <- MOSolListBad$decisionEvaluated$scenarioDf[pred.tree,]
indexTemp <- rep(pred.tree,nrow(MOSolList$decisionEvaluated$strategyDf))
MOSolListBad$decisionEvaluated$evalDf <- MOSolListBad$decisionEvaluated$evalDf[indexTemp,]
MOSolListBad$performanceMetrics <- calculatePerformaceByStrategy(MOSolListBad$decisionEvaluated, parametersList)
return(list(MOSolListGood=MOSolListGood,MOSolListBad=MOSolListBad))
}
SolSplited <- splitSolByClassTree(MOSolList, classTree)
SolSplited
## customized trade off plots
plotCustTradeOff(SolSplited$MOSolListGood,SolSplited$MOSolListBad, classTree, objBad="E_ROI",
annotateId=NA,getBestStrategies(MOSolList))
grid.arrange(linePlotAternatives(MOSolList,SolSplited,classTree, 66, 1001),
verticalBarsPlotAlternatives(MOSolList,66,1001), nrow = 2)
